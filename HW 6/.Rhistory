knitr::opts_chunk$set(echo = TRUE,
fig.align = TRUE,
fig.width = 6,
fig.height = 4)
suppressMessages(require(tidyverse))
suppressMessages(require(janitor))
suppressMessages(require(purrr))
suppressWarnings(require(leaps))
suppressMessages(require(ggthemes))
suppressMessages(require(ISLR2))
# generate p = 20, n = 1000
set.seed(123)
df <- Hitters
head(df)
df <- Hitters %>%
dplyr::filter(! is.na(Salary)) %>%
dplyr::mutate(
log_salary = log(Salary)
)
head(df)
View(df)
knitr::opts_chunk$set(echo = TRUE,
fig.align = TRUE,
fig.width = 6,
fig.height = 4)
suppressMessages(require(tidyverse))
suppressMessages(require(janitor))
suppressMessages(require(purrr))
suppressWarnings(require(leaps))
suppressMessages(require(ggthemes))
suppressMessages(require(ISLR2))
# generate p = 20, n = 1000
set.seed(123)
df <- Hitters %>%
dplyr::filter(! is.na(Salary)) %>%
dplyr::mutate(
log_salary = log(Salary)
)
View(df)
df <- Hitters %>%
dplyr::filter(! is.na(Salary)) %>%
dplyr::mutate(
log_salary = log(Salary)
) %>%
rownames_to_column("player_name")
View(df)
train <- df[1:200, ]
test <- df[201:nrow(df), ]
suppressMessages(require(randomForest))
suppressMessages(require(gbm))
shrk <- seq(0.001, 1, by = 0.05)
shrk
for (y in shrk) {
print(y)
}
head(df)
df <- Hitters %>%
dplyr::filter(! is.na(Salary)) %>%
dplyr::mutate(
log_salary = log(Salary)
) # %>%
mod <- gbm(log_salary ~ .,
data = df,
shrinkage = shrk,
n.trees = 1000,
distribution = "gaussian")
mod
summary(mod)
mod <- gbm(log_salary ~ .,
data = df,
shrinkage = shrk,
n.trees = 1000)
summary(mod)
mod <- gbm(log_salary ~ .,
data = train,
shrinkage = shrk,
n.trees = 1000)
train <- df[1:200, ]
test <- df[201:nrow(df), ]
mod <- gbm(log_salary ~ .,
data = train,
shrinkage = shrk,
n.trees = 1000)
predict(mod, train)
mod <- gbm(log_salary ~ .,
data = train,
shrinkage = shrk,
n.trees = 1000,
distribution = "gaussian")
predict(mod, train)
train$pred_sal <- predict(mod, train)
mean((train$log_salary - train$pred_sal)^2)
m <- data.frame("shrinkage" = shrk,
"MSE" = mse)
mse <- mean((train$log_salary - train$pred_sal)^2)
m <- data.frame("shrinkage" = shrk,
"MSE" = mse)
m
lst <- list()
n <- 0
shrk <- seq(0.001, 1, by = 0.025)
length(shrk)
scales::percent(n / length(shrk))
shrk <- seq(0.001, 1, by = 0.025)
lst <- list()
n <- 0
for (y in shrk) {
# print(y)
n <- n + 1
mod <- gbm(log_salary ~ .,
data = train,
shrinkage = shrk,
n.trees = 1000,
distribution = "gaussian")
train$pred_sal <- predict(mod, train)
mse <- mean((train$log_salary - train$pred_sal)^2)
m <- data.frame("shrinkage" = y,
"MSE" = mse)
lst[[n]] <- m
print(paste0(scales::percent(n / length(shrk)), " of models tested."))
}
res <- dplyr::bind_rows(lst)
View(res)
res %>%
ggplot() +
geom_point(aes(x = shrinkage, y = MSE))
(train$log_salary - train$pred_sal)
df <- Hitters %>%
dplyr::filter(! is.na(Salary)) %>%
dplyr::mutate(
log_salary = log(Salary)
) %>%
dplyr::select(-c(Salary)) # %>%
train <- df[1:200, ]
test <- df[201:nrow(df), ]
shrk <- seq(0.001, 1, by = 0.025)
lst <- list()
n <- 0
for (y in shrk) {
# print(y)
n <- n + 1
mod <- gbm(log_salary ~ .,
data = train,
shrinkage = shrk,
n.trees = 1000,
distribution = "gaussian")
train$pred_sal <- predict(mod, train, n.trees = 1000)
mse <- mean((train$log_salary - train$pred_sal)^2)
m <- data.frame("shrinkage" = y,
"MSE" = mse)
lst[[n]] <- m
print(paste0(scales::percent(n / length(shrk)), " of models tested."))
}
res <- dplyr::bind_rows(lst)
res %>%
ggplot() +
geom_point(aes(x = shrinkage, y = MSE))
res %>%
ggplot() +
geom_point(aes(x = shrinkage, y = MSE)) +
geom_point(aes(x = shrinkage, y = MSE))
res %>%
ggplot() +
geom_point(aes(x = shrinkage, y = MSE)) +
geom_line(aes(x = shrinkage, y = MSE))
res %>%
ggplot() +
geom_point(aes(x = shrinkage, y = MSE), color = "blue") +
geom_line(aes(x = shrinkage, y = MSE))
res %>%
ggplot() +
geom_point(aes(x = shrinkage, y = MSE), color = "purple") +
geom_line(aes(x = shrinkage, y = MSE), color = "purple")
lst <- list()
n <- 0
for (y in shrk) {
# print(y)
n <- n + 1
mod <- gbm(log_salary ~ .,
data = train,
shrinkage = shrk,
n.trees = 1000,
distribution = "gaussian")
train$pred_sal <- predict(mod, train, n.trees = 1000)
test$pred_sal <- predict(mod, test, n.trees = 1000)
mse <- mean((train$log_salary - train$pred_sal)^2)
tmse <- mean((test$log_salary - test$pred_sal)^2)
m <- data.frame("shrinkage" = y,
"MSE" = mse,
"tMSE" = tmse)
lst[[n]] <- m
print(paste0(scales::percent(n / length(shrk)), " of models tested."))
}
test$pred_sal <- predict(mod, test, n.trees = 1000)
predict(mod, test, n.trees = 1000)
train <- df[1:200, ]
mod <- gbm(log_salary ~ .,
data = train,
shrinkage = shrk,
n.trees = 1000,
distribution = "gaussian")
train$pred_sal <- predict(mod, train, n.trees = 1000)
test$pred_sal <- predict(mod, test, n.trees = 1000)
set.seed(123)
df <- Hitters %>%
dplyr::filter(! is.na(Salary)) %>%
dplyr::mutate(
log_salary = log(Salary)
) %>%
dplyr::select(-c(Salary)) # %>%
train <- df[1:200, ]
test <- df[201:nrow(df), ]
shrk <- seq(0.001, 1, by = 0.025)
lst <- list()
n <- 0
for (y in shrk) {
# print(y)
n <- n + 1
mod <- gbm(log_salary ~ .,
data = train,
shrinkage = shrk,
n.trees = 1000,
distribution = "gaussian")
train$pred_sal <- predict(mod, train, n.trees = 1000)
test$pred_sal <- predict(mod, test, n.trees = 1000)
mse <- mean((train$log_salary - train$pred_sal)^2)
tmse <- mean((test$log_salary - test$pred_sal)^2)
m <- data.frame("shrinkage" = y,
"MSE" = mse,
"tMSE" = tmse)
lst[[n]] <- m
print(paste0(scales::percent(n / length(shrk)), " of models tested."))
}
res <- dplyr::bind_rows(lst)
View(res)
res %>%
ggplot() +
geom_point(aes(x = shrinkage, y = MSE), color = "purple") +
geom_line(aes(x = shrinkage, y = MSE), color = "purple") +
geom_point(aes(x = shrinkage, y = tMSE), color = "black") +
geom_line(aes(x = shrinkage, y = tMSE), color = "black")
res %>%
ggplot() +
geom_point(aes(x = shrinkage, y = MSE, color = "training")) +
geom_line(aes(x = shrinkage, y = MSE)) +
geom_point(aes(x = shrinkage, y = tMSE)) +
geom_line(aes(x = shrinkage, y = tMSE))
res %>%
ggplot() +
geom_point(aes(x = shrinkage, y = MSE, color = "training")) +
geom_line(aes(x = shrinkage, y = MSE, color = "training")) +
geom_point(aes(x = shrinkage, y = tMSE, color = "test")) +
geom_line(aes(x = shrinkage, y = tMSE, color = "test")))
res %>%
ggplot() +
geom_point(aes(x = shrinkage, y = MSE, color = "training")) +
geom_line(aes(x = shrinkage, y = MSE, color = "training")) +
geom_point(aes(x = shrinkage, y = tMSE, color = "test")) +
geom_line(aes(x = shrinkage, y = tMSE, color = "test"))
suppressMessages(require(ggthemes))
res %>%
ggplot() +
geom_point(aes(x = shrinkage, y = MSE, color = "training")) +
geom_line(aes(x = shrinkage, y = MSE, color = "training")) +
geom_point(aes(x = shrinkage, y = tMSE, color = "test")) +
geom_line(aes(x = shrinkage, y = tMSE, color = "test")) +
scale_color_colorblind()
shrk <- seq(0.001, 1, by = 0.025)
shrk <- seq(0.001, 1, by = 0.0025)
lst <- list()
n <- 0
train <- df[1:200, ]
test <- df[201:nrow(df), ]
shrk <- seq(0.001, 1, by = 0.0025)
lst <- list()
n <- 0
for (y in shrk) {
# print(y)
n <- n + 1
mod <- gbm(log_salary ~ .,
data = train,
shrinkage = shrk,
n.trees = 1000,
distribution = "gaussian")
train$pred_sal <- predict(mod, train, n.trees = 1000)
test$pred_sal <- predict(mod, test, n.trees = 1000)
mse <- mean((train$log_salary - train$pred_sal)^2)
tmse <- mean((test$log_salary - test$pred_sal)^2)
m <- data.frame("shrinkage" = y,
"MSE" = mse,
"tMSE" = tmse)
lst[[n]] <- m
print(paste0(scales::percent(n / length(shrk)), " of models tested."))
}
res %>%
ggplot() +
geom_point(aes(x = shrinkage, y = MSE, color = "training")) +
geom_line(aes(x = shrinkage, y = MSE, color = "training")) +
geom_point(aes(x = shrinkage, y = tMSE, color = "test")) +
geom_line(aes(x = shrinkage, y = tMSE, color = "test")) +
scale_color_colorblind()
res <- dplyr::bind_rows(lst)
res %>%
ggplot() +
geom_point(aes(x = shrinkage, y = MSE, color = "training")) +
geom_line(aes(x = shrinkage, y = MSE, color = "training")) +
geom_point(aes(x = shrinkage, y = tMSE, color = "test")) +
geom_line(aes(x = shrinkage, y = tMSE, color = "test")) +
scale_color_colorblind()
shrk <- seq(0.001, 1, by = 0.005)
res %>%
ggplot() +
geom_point(aes(x = shrinkage, y = MSE, color = "training")) +
geom_line(aes(x = shrinkage, y = MSE, color = "training")) +
geom_point(aes(x = shrinkage, y = tMSE, color = "test")) +
geom_line(aes(x = shrinkage, y = tMSE, color = "test")) +
scale_color_colorblind()
head(test)
View(test)
View(train)
train <- df[1:200, ]
test <- df[201:nrow(df), ]
shrk <- seq(0.001, 1, by = 0.005)
lst <- list()
n <- 0
for (y in shrk) {
# print(y)
n <- n + 1
mod <- gbm(log_salary ~ .,
data = train,
shrinkage = shrk,
n.trees = 1000,
distribution = "gaussian")
train$pred_sal <- predict(mod, train, n.trees = 1000)
test$pred_sal <- predict(mod, test, n.trees = 1000)
mse <- mean((train$log_salary - train$pred_sal)^2)
tmse <- mean((test$log_salary - test$pred_sal)^2)
m <- data.frame("shrinkage" = y,
"MSE" = mse,
"tMSE" = tmse)
lst[[n]] <- m
print(paste0(scales::percent(n / length(shrk)), " of models tested."))
}
res <- dplyr::bind_rows(lst)
res %>%
ggplot() +
geom_point(aes(x = shrinkage, y = MSE, color = "training")) +
geom_line(aes(x = shrinkage, y = MSE, color = "training")) +
geom_point(aes(x = shrinkage, y = tMSE, color = "test")) +
geom_line(aes(x = shrinkage, y = tMSE, color = "test")) +
scale_color_colorblind()
res %>%
ggplot() +
geom_point(aes(x = shrinkage, y = MSE, color = "training")) +
geom_line(aes(x = shrinkage, y = MSE, color = "training")) +
geom_point(aes(x = shrinkage, y = tMSE, color = "test")) +
geom_line(aes(x = shrinkage, y = tMSE, color = "test")) +
scale_color_colorblind() +
theme_minimal() +
theme(legend.title = element_blank())
plot(train$log_salary, train$pred_sal)
plot(test$log_salary, test$pred_sal)
tmse
min(res$tMSE)
train_sal
train
ml <- lm(log_salary ~ .,
data = train %>%
dplyr::select(-c(pred_sal)))
test$lm_sal <- predict(ml, newdata = test)
plot(test$log_salary, test$lm_sal)
reg_m <- regsubsets(log_salary ~.,
data = train %>%
dplyr::select(-c(pred_sal)),
method = "exhaustive")
reg_m
summary(reg_m)
five_m <- glm(log_salary ~ .,
data = train %>%
dplyr::select(AtBat, Hits, Walks, Years, PutOuts),
)
five_m <- glm(log_salary ~ .,
data = train %>%
dplyr::select(log_salary, AtBat, Hits, Walks, Years, PutOuts),
)
test$sub_sal <- predict(five_m, newdata = test)
simple_mse <- mean((test$log_salary - test$lm_sal)^2)
subset_mse <- mean((test$log_salary - test$sub_sal)^2)
cor(test)
varImpPlot(mod)
summary.gbm(mod)
test <- test[, -"pred_sal"]
df <- Hitters %>%
dplyr::filter(! is.na(Salary)) %>%
dplyr::mutate(
log_salary = log(Salary)
) %>%
dplyr::select(-c(Salary)) # %>%
train <- df[1:200, ]
test <- df[201:nrow(df), ]
shrk <- seq(0.001, 1, by = 0.005)
lst <- list()
n <- 0
for (y in shrk) {
# print(y)
n <- n + 1
mod <- gbm(log_salary ~ .,
data = train,
shrinkage = shrk,
n.trees = 1000,
distribution = "gaussian")
train$pred_sal <- predict(mod, train, n.trees = 1000)
test$pred_sal <- predict(mod, test, n.trees = 1000)
mse <- mean((train$log_salary - train$pred_sal)^2)
tmse <- mean((test$log_salary - test$pred_sal)^2)
m <- data.frame("shrinkage" = y,
"MSE" = mse,
"tMSE" = tmse)
lst[[n]] <- m
print(paste0(scales::percent(n / length(shrk)), " of models tested."))
test <- test %>%
dplyr::select(-c(pred_sal))
# took me to long to figure out that this was being used in future models past the first on bc I forgot to remove the column
train <- train %>%
dplyr::select(-c(pred_sal))
}
res <- dplyr::bind_rows(lst)
res %>%
ggplot() +
geom_point(aes(x = shrinkage, y = MSE, color = "training")) +
geom_line(aes(x = shrinkage, y = MSE, color = "training")) +
geom_point(aes(x = shrinkage, y = tMSE, color = "test")) +
geom_line(aes(x = shrinkage, y = tMSE, color = "test")) +
scale_color_colorblind() +
theme_minimal() +
theme(legend.title = element_blank())
test
summary.gbm(mod)
head(train)
bag_mod <- randomForest(log_salary ~ .,
data = train,
mtry = ncol(train) - 1,
ntree = 500,
importance = TRUE)
test$bag_pred <- predict(bag_mod, test)
head(test)
bag_mse <- mean((test$log_salary - test$bag_pred)^2)
varImpPlot(bag_mod)
